def version_war
def context
def nameBuildDocker
pipeline{
    agent any
    stages{
        stage('Build BACKEND'){
            steps{
                sh 'mvn clean package -DskipTests=true'
                script {
                    version_war = sh( script:'mvn help:evaluate -Dexpression=project.version -q -DforceStdout',returnStdout: true).trim()
                    context = sh( script:'mvn help:evaluate -Dexpression=project.name -q -DforceStdout',returnStdout: true).trim()
                    nameBuildDocker = "${context}:${version_war}"
                }               
               
                sh "echo !!! ${version_war}"   
            }
        }
        stage('TESTES UNITARIOS BACKEND'){
            steps{
                sh 'mvn test'
            }
        }
        stage('SONAR ANALISES BACKEND'){
            environment {
                scannerHome = tool 'SONAR_SCANER'
            }           

            steps{
                 withSonarQubeEnv('SONAR_SERVER_LOCAL') {
                  sh  "${scannerHome}/bin/sonar-scanner -e -Dsonar.projectKey=deploy-back  -Dsonar.host.url=http://localhost:9000/ -Dsonar.login=e9e2d622a1f63fdff76cb08b0972873064aabf4d  -Dsonar.java.binaries=target"
                 
              }

            }
        }
        stage("Quality Gate") {
           
            steps {
              sleep(5)  
              timeout(time: 1, unit: 'MINUTES') {
                     waitForQualityGate abortPipeline: true
     
              }
            }
        }
        stage("DEPLOY BACKEND") {
           
            environment {
                IMAGEM_DOCKER_COMPOSE = nameBuildDocker;
                DOCKER_COMPOSE_CONTAINER = "${context}_PRD"

            }  
            steps {
                sh "docker build -t ${nameBuildDocker} ."
                sh "docker-compose up"
            }
        }
        stage("API TEST BACKEND") {
           
            steps {
                dir('api-test'){
                    git 'https://github.com/jhdresch/teste-integracao'
                    sh 'mvn test'
                } 
            }
        }
        stage("DEPLOY FRONTEND") {

            steps {
                dir('deploy-front'){
                    git 'https://github.com/jhdresch/tasks-frontend'
                    sh 'mvn clean package'
                    deploy adapters : [tomcat8(credentialsId:'TOMCAT_LOGIN',path:'',url:'http://localhost:8001/')],contextPath:'tasks',war:'target/tasks.war'
                } 
            }

        } 
        stage("FUNCIONAL TEST") {
           
            steps {
                dir('funcional-test'){
                    git branch: 'main', url: 'https://github.com/jhdresch/teste-funcional'
                    sh 'mvn clean test'
                } 
            }
        }
        
    }
    
}
